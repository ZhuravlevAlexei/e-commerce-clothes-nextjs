// в данном проекте использется
// старая версия настроек из файла
// .eslintrc.json
// import { dirname } from 'path'
// import { fileURLToPath } from 'url'
// import { FlatCompat } from '@eslint/eslintrc'

// const __filename = fileURLToPath(import.meta.url)
// const __dirname = dirname(__filename)

// const compat = new FlatCompat({
//   baseDirectory: __dirname,
// })

// const eslintConfig = [
//   ...compat.extends('next/core-web-vitals', 'next/typescript'),
// ]

// export default eslintConfig

//а это новая версия сконвертирована chatGPT из .eslintrc.json
export default [
  {
    ignores: ['node_modules', 'dist'], // Аналог .eslintignore
  },
  {
    languageOptions: {
      parser: require('@typescript-eslint/parser'),
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    linterOptions: {
      reportUnusedDisableDirectives: true,
    },
    plugins: {
      '@typescript-eslint': require('@typescript-eslint/eslint-plugin'),
      prettier: require('eslint-plugin-prettier'),
      react: require('eslint-plugin-react'),
    },
    extends: [
      'next/core-web-vitals',
      'plugin:@typescript-eslint/recommended',
      'plugin:prettier/recommended',
    ],
    rules: {
      'prettier/prettier': [
        'error',
        {
          endOfLine: 'auto',
        },
      ],
      '@typescript-eslint/no-unused-vars': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/quotes': [
        'error',
        'single',
        {
          avoidEscape: true,
          allowTemplateLiterals: true,
        },
      ],
      'no-trailing-spaces': ['error', { skipBlankLines: false }],
      'no-multiple-empty-lines': ['error', { max: 1, maxBOF: 1 }],
      'object-curly-spacing': ['error', 'always'],
      'comma-spacing': ['error', { before: false, after: true }],
      'arrow-spacing': ['error', { before: true, after: true }],
      'space-infix-ops': ['error', { int32Hint: false }],
      'space-after-keywords': 'off',
      'keyword-spacing': ['error', { before: true, after: true }],
      'react/jsx-indent': ['error', 2, { indentLogicalExpressions: true }],
      'arrow-body-style': ['error', 'as-needed'],
      'padded-blocks': ['error', 'never'],
      semi: ['error', 'never'],
      'max-len': ['error', { code: 120 }],
      indent: ['error', 2],
      'react/self-closing-comp': [
        'error',
        {
          component: true,
          html: true,
        },
      ],
      'react/jsx-tag-spacing': ['error', { beforeSelfClosing: 'always' }],
    },
  },
]
